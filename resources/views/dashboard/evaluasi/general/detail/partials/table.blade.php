@push('styles_3')
    <style>
        #table-data {
            font-size: 0.9em;
            white-space: nowrap;
        }

        #table-data td,
        #table-data th {
            padding: 4px 8px;
            vertical-align: middle;
        }
    </style>
@endpush

<form id="approveRkbForm" method="POST" action="{{ route('evaluasi_rkb_general.detail.approve', $rkb->id) }}">
    @csrf
    <div class="ibox-body ms-0 ps-0 table-responsive">
        <table class="m-0 table table-bordered table-striped" id="table-data">
            <thead class="table-primary">
                <tr>
                    <th class="text-center">Nama Alat</th>
                    <th class="text-center">Kategori Sparepart</th>
                    <th class="text-center">Sparepart</th>
                    <th class="text-center">Quantity Requested</th>
                    <th class="text-center">Quantity Approved</th>
                    <th class="text-center">Quantity in Stock</th>
                    <th class="text-center">Satuan</th>
                    <th class="text-center">Aksi</th>
                </tr>
            </thead>
            <tbody>
                {{-- Content generated by DataTable --}}
            </tbody>
        </table>
    </div>

    <!-- Hidden submit button -->
    <button class="btn btn-success btn-sm approveBtn" id="hiddenApproveRkbButton" type="submit" hidden></button>
</form>

@push('scripts_3')
    <script>
        $(document).ready(function() {
            const lastPageKey = 'lastPage_detail_rkb';

            var lastPage = localStorage.getItem(lastPageKey) ? parseInt(localStorage.getItem(lastPageKey)) : 0;

            var table = $('#table-data').DataTable({
                processing: true,
                serverSide: true,
                responsive: true,
                ajax: {
                    url: "{{ route('evaluasi_detail_rkb_general.getData', $rkb->id) }}",
                    type: "GET",
                    dataSrc: function(json) {
                        // Add dummy data for quantity_in_stock
                        json.data.forEach(row => {
                            row.quantity_in_stock = Math.floor(Math.random() * 25); // Random stock value between 0-24
                        });
                        return json.data;
                    }
                },
                language: {
                    paginate: {
                        previous: '<i class="bi bi-caret-left"></i>',
                        next: '<i class="bi bi-caret-right"></i>'
                    }
                },
                pageLength: 10,
                lengthMenu: [
                    [10, 25, 50],
                    [10, 25, 50]
                ],
                ordering: true,
                order: [
                    [1, 'asc'], // Sort by Kategori Sparepart (column index 1)
                    [2, 'asc'] // Then by Sparepart (column index 2)
                ],
                columnDefs: [{
                        targets: [1, 2], // Kategori Sparepart and Sparepart columns
                        orderable: false // Disable sorting by user
                    },
                    {
                        targets: '_all', // Apply to all other columns
                        orderable: false // Disable sorting by user
                    },
                    {
                        targets: 5, // Quantity in Stock
                        className: 'text-center nowrap-column',
                        orderable: false,
                        searchable: false,
                        render: function(data, type, row) {
                            return row.quantity_in_stock !== undefined ? row.quantity_in_stock : 0;
                        }
                    },
                    {
                        targets: 4, // Quantity Approved
                        className: 'text-center nowrap-column',
                        orderable: false,
                        searchable: false,
                        render: function(data, type, row) {
                            const value = row.quantity_approved !== null ? row.quantity_approved : row.quantity_requested;
                            return `
                <input type="number" class="form-control quantity-approved-input text-center" 
                name="quantity_approved[${row.id}]" 
                value="${value}" 
                min="0" />
                `;
                        }
                    },
                    {
                        targets: 7, // Actions
                        className: 'text-center nowrap-column',
                        orderable: false,
                        searchable: false,
                        width: "1%",
                        render: function(data, type, row) {
                            const disabled = row.is_finalized ? 'disabled' : '';
                            return `
                <button class="btn btn-warning mx-1 ubahBtn" ${disabled} onclick="fillFormEditDetailRKB(${row.id})" data-id="${row.id}">
                <i class="bi bi-pencil-square"></i>
                </button>
                <button class="btn btn-danger mx-1 deleteBtn" ${disabled} data-id="${row.id}">
                <i class="bi bi-trash"></i>
                </button>
                `;
                        }
                    }
                ],
                columns: [{
                        data: 'masterDataAlat',
                        name: 'masterDataAlat',
                        className: 'text-center'
                    }, // Column 0
                    {
                        data: 'kategoriSparepart',
                        name: 'kategoriSparepart',
                        className: 'text-center'
                    }, // Column 1
                    {
                        data: 'masterDataSparepart',
                        name: 'masterDataSparepart',
                        className: 'text-center'
                    }, // Column 2
                    {
                        data: 'quantity_requested',
                        name: 'quantity_requested',
                        className: 'text-center'
                    }, // Column 3
                    {
                        data: 'quantity_approved',
                        name: 'quantity_approved',
                        className: 'text-center'
                    }, // Column 4
                    {
                        data: 'quantity_in_stock',
                        name: 'quantity_in_stock',
                        className: 'text-center'
                    }, // Column 5
                    {
                        data: 'satuan',
                        name: 'satuan',
                        className: 'text-center'
                    }, // Column 6
                    {
                        data: 'aksi',
                        name: 'aksi',
                        className: 'text-center'
                    } // Column 7
                ],
                drawCallback: function(settings) {
                    mergeTableCells('#table-data', 2, 5); // Merge cells in column 5 (Quantity in Stock), group by column 2 (Sparepart)
                }
            });


            table.on('page', function() {
                var currentPage = table.page();
                localStorage.setItem(lastPageKey, currentPage);
            });

            // Merge table cells function
            function mergeTableCells(tableSelector, groupByColIndex, targetColIndex) {
                const table = $(tableSelector);
                let prevSparepart = null;
                let rowspan = 1;

                table.find('tbody tr').each(function(index, row) {
                    const $row = $(row);
                    const currentSparepart = $row.find(`td:eq(${groupByColIndex})`).text().trim();
                    const $currentStockCell = $row.find(`td:eq(${targetColIndex})`);

                    if (currentSparepart === prevSparepart) {
                        $currentStockCell.remove(); // Remove the duplicate cell
                        rowspan++;
                    } else {
                        if (rowspan > 1) {
                            // Apply rowspan to the previous row
                            table.find(`tbody tr:eq(${index - rowspan}) td:eq(${targetColIndex})`).attr('rowspan', rowspan);
                        }
                        rowspan = 1;
                        prevSparepart = currentSparepart;
                    }
                });

                // Handle the last group
                if (rowspan > 1) {
                    table.find(`tbody tr:eq(${table.find('tbody tr').length - rowspan}) td:eq(${targetColIndex})`).attr('rowspan', rowspan);
                }
            }
        });
    </script>
@endpush
