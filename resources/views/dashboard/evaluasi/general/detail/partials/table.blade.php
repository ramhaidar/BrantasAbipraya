@push('styles_3')
    <style>
        #table-data {
            font-size: 0.9em;
            white-space: nowrap;
        }

        #table-data td,
        #table-data th {
            /* padding: 4px 8px; */
            vertical-align: middle;
        }
    </style>
@endpush

<form id="approveRkbForm" method="POST" action="{{ route('evaluasi_rkb_general.detail.approve', $rkb->id) }}">
    @csrf
    <div class="ibox-body ms-0 ps-0 table-responsive">
        <table class="m-0 table table-bordered table-striped" id="table-data">
            <thead class="table-primary">
                <tr>
                    <th class="text-center">Nama Alat</th>
                    <th class="text-center">Kode Alat</th> <!-- Kode Alat -->
                    <th class="text-center">Kategori Sparepart</th>
                    <th class="text-center">Sparepart</th>
                    <th class="text-center">Part Number</th> <!-- Part Number -->
                    <th class="text-center">Merk</th> <!-- Merk -->
                    <th class="text-center">Quantity Requested</th>
                    <th class="text-center">Quantity Approved</th>
                    <th class="text-center">Quantity in Stock</th>
                    <th class="text-center">Satuan</th>
                </tr>
            </thead>

            <tbody>
                {{-- Content generated by DataTable --}}
            </tbody>
        </table>
    </div>

    <!-- Hidden submit button -->
    <button class="btn btn-success btn-sm approveBtn" id="hiddenApproveRkbButton" type="submit" hidden></button>
</form>

@push('scripts_3')
    <script>
        $(document).ready(function() {
            const lastPageKey = 'lastPage_detail_rkb';

            var lastPage = localStorage.getItem(lastPageKey) ? parseInt(localStorage.getItem(lastPageKey)) : 0;

            var table = $('#table-data').DataTable({
                processing: true,
                serverSide: true,
                responsive: true,
                ajax: {
                    url: "{{ route('evaluasi_detail_rkb_general.getData', $rkb->id) }}",
                    type: "GET"
                },
                language: {
                    paginate: {
                        previous: '<i class="bi bi-caret-left"></i>',
                        next: '<i class="bi bi-caret-right"></i>'
                    }
                },
                pageLength: 100,
                lengthMenu: [
                    [100],
                    [100]
                ],
                ordering: true,
                order: [
                    [4, 'asc'], // Sort by Part Number
                ],
                columnDefs: [{
                        targets: '_all', // Disable sorting for all columns
                        orderable: false,
                    },
                    {
                        targets: 7, // Quantity Approved
                        className: 'text-center nowrap-column',
                        render: function(data, type, row) {
                            // console.log(row);
                            let backgroundColor;

                            // Determine background color based on conditions
                            if (row.is_approved) {
                                backgroundColor = 'bg-primary-subtle';
                            } else {
                                backgroundColor = row.quantity_approved !== null ?
                                    'bg-success-subtle' : 'bg-warning-subtle';
                            }

                            // the input will be disabled if is_approved is true or is_evaluated is true
                            const disabled = row.is_approved || row.is_evaluated ? 'disabled' : '';

                            // Return the input element with dynamic styles
                            return `
<input type="number" ${disabled} class="form-control text-center ${backgroundColor}" 
name="quantity_approved[${row.id}]" 
value="${row.quantity_approved ?? row.quantity_requested}" 
min="0" />
`;
                        }
                    },
                    {
                        targets: 8, // Quantity in Stock
                        className: 'text-center nowrap-column',
                        render: function(data, type, row) {
                            // Generate random stock value if not provided
                            if (row.quantity_in_stock === null || row.quantity_in_stock ===
                                undefined || row.quantity_in_stock === 0) {
                                const randomStock = Math.floor(Math.random() * (25 - 1 + 1)) +
                                    1; // Random between 1 and 500
                                // return randomStock; // Use random value if stock is null or 0
                                return 0; // Use random value if stock is null or 0
                            }
                            // return row.quantity_in_stock; // Use actual stock if available
                            return 0; // Use actual stock if available
                        }
                    }
                ],
                columns: [{
                        data: 'masterDataAlat',
                        name: 'masterDataAlat',
                        className: 'text-center'
                    },
                    {
                        data: 'kodeAlat', // Kode Alat
                        name: 'kodeAlat',
                        className: 'text-center'
                    },
                    {
                        data: 'kategoriSparepart',
                        name: 'kategoriSparepart',
                        className: 'text-center'
                    },
                    {
                        data: 'masterDataSparepart',
                        name: 'masterDataSparepart',
                        className: 'text-center'
                    },
                    {
                        data: 'partNumber', // Part Number
                        name: 'partNumber',
                        className: 'text-center'
                    },
                    {
                        data: 'merk', // Merk
                        name: 'merk',
                        className: 'text-center'
                    },
                    {
                        data: 'quantity_requested',
                        name: 'quantity_requested',
                        className: 'text-center'
                    },
                    {
                        data: 'quantity_approved',
                        name: 'quantity_approved',
                        className: 'text-center'
                    },
                    {
                        data: 'quantity_in_stock',
                        name: 'quantity_in_stock',
                        className: 'text-center'
                    },
                    {
                        data: 'satuan',
                        name: 'satuan',
                        className: 'text-center'
                    }
                ],
                searching: false, // Disable global search
                drawCallback: function(settings) {
                    // Merge rows with jQuery
                    // mergeStockColumn();
                },

            });

            table.on('page', function() {
                var currentPage = table.page();
                localStorage.setItem(lastPageKey, currentPage);
            });

            function mergeStockColumn() {
                const rows = $('#table-data tbody tr'); // Semua baris dalam tabel
                let previousSparepart = null;
                let totalStock = 0;
                let rowToMerge = null;
                let rowCount = 0; // Hitung jumlah baris untuk rowspan

                rows.each(function() {
                    const $row = $(this);
                    const sparepart = $row.find('td:eq(4)').text().trim(); // Ambil teks kolom Sparepart
                    const stockCell = $row.find('td:eq(8)'); // Cell untuk Quantity in Stock
                    const stock = parseInt(stockCell.text().trim(), 10) ||
                        0; // Ambil nilai Quantity in Stock

                    if (sparepart === previousSparepart) {
                        // Tambahkan nilai stok
                        totalStock += stock;
                        rowCount++;

                        // Hapus cell Quantity in Stock pada baris ini
                        stockCell.remove();
                    } else {
                        // Jika sparepart berubah, tambahkan rowspan ke baris pertama grup sebelumnya
                        if (rowToMerge) {
                            rowToMerge.attr('rowspan', rowCount); // Set rowspan
                            rowToMerge.html(totalStock); // Isi total stok
                        }

                        // Reset variabel untuk sparepart baru
                        previousSparepart = sparepart;
                        totalStock = stock;
                        rowToMerge = stockCell; // Simpan cell untuk Quantity in Stock
                        rowCount = 1; // Reset jumlah baris
                    }
                });

                // Tambahkan rowspan ke baris terakhir
                if (rowToMerge) {
                    rowToMerge.attr('rowspan', rowCount);
                    rowToMerge.html(totalStock);
                }
            }
        });
    </script>
@endpush
